using System.Text.Json.Serialization;
using SharpStix.Common;
using SharpStix.Serialisation.Json.Converters;
using SharpStix.Services;

namespace SharpStix.StixTypes.Vocabulary;

[JsonConverter(typeof(StixOpenVocabConverter<MalwareResult>))]
[StixTypeDiscriminator(TYPE)]
public sealed record MalwareResult : StixOpenVocab, IFromString<MalwareResult>
{
    private const string TYPE = "malware-result-ov";
    public static readonly MalwareResult Malicious = FromString("malicious");

    public static readonly MalwareResult Suspicious = FromString("suspicious");

    public static readonly MalwareResult Benign = FromString("benign");

    public static readonly MalwareResult Unknown = FromString("unknown");

    private MalwareResult(string Value) : base(Value)
    {
    }

    public override string Type => TYPE;

    public static MalwareResult FromString(string value)
    {
        if (OpenVocabManager<MalwareResult>.TryGetValue(value, out MalwareResult? vocab))
            return vocab!;

        vocab = new MalwareResult(value);
        OpenVocabManager<MalwareResult>.TryAdd(vocab);
        return vocab;
    }

    public override string ToString() => base.ToString();
}