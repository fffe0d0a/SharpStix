using System.Text.Json.Serialization;
using SharpStix.Common;
using SharpStix.Serialisation.Json.Converters;
using SharpStix.Services;

namespace SharpStix.StixTypes.Vocabulary;

[JsonConverter(typeof(StixOpenVocabConverter<MalwareType>))]
[StixTypeDiscriminator(TYPE)]
public sealed record MalwareType : StixOpenVocab, IFromString<MalwareType>
{
    private const string TYPE = "malware-type-ov";
    public static readonly MalwareType Adware = FromString("adware");

    public static readonly MalwareType Backdoor = FromString("backdoor");

    public static readonly MalwareType Bot = FromString("bot");

    public static readonly MalwareType Bootkit = FromString("bootkit");

    public static readonly MalwareType DDOS = FromString("ddos");

    public static readonly MalwareType Downloader = FromString("downloader");

    public static readonly MalwareType Dropper = FromString("dropper");

    public static readonly MalwareType ExploitKit = FromString("exploit-kit");

    public static readonly MalwareType Keylogger = FromString("keylogger");

    public static readonly MalwareType Ransomware = FromString("ransomware");

    public static readonly MalwareType RemoteAccessTrojan = FromString("remote-access-trojan");

    public static readonly MalwareType ResourceExploitation = FromString("resource-exploitation");

    public static readonly MalwareType RogueSecuritySoftware = FromString("rogue-security-software");

    public static readonly MalwareType Rootkit = FromString("rootkit");

    public static readonly MalwareType ScreenCapture = FromString("screen-capture");

    public static readonly MalwareType Spyware = FromString("spyware");

    public static readonly MalwareType Trojan = FromString("trojan");

    public static readonly MalwareType Unknown = FromString("unknown");

    public static readonly MalwareType Virus = FromString("virus");

    public static readonly MalwareType Webshell = FromString("webshell");

    public static readonly MalwareType Wiper = FromString("wiper");

    public static readonly MalwareType Worm = FromString("worm");

    private MalwareType(string Value) : base(Value)
    {
    }

    public override string Type => TYPE;

    public static MalwareType FromString(string value)
    {
        if (OpenVocabManager<MalwareType>.TryGetValue(value, out MalwareType? vocab))
            return vocab!;

        vocab = new MalwareType(value);
        OpenVocabManager<MalwareType>.TryAdd(vocab);
        return vocab;
    }

    public override string ToString() => base.ToString();
}